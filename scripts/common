#!/bin/bash -e

# Save THIS_SCRIPT_DIR.
OLD_THIS_SCRIPT_DIR="${THIS_SCRIPT_DIR}"

THIS_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
GIT_ROOT_DIR="$(realpath "${THIS_SCRIPT_DIR}/..")"
SCRIPTS_DIR="${GIT_ROOT_DIR}/scripts"

ASTERISK_CONFIG_DIR="${GIT_ROOT_DIR}/asterisk"
ASTERISK_CONFIG_INSTALL_DIR=/etc/asterisk
ASTERISK_SPOOLDIR=/var/spool/asterisk
ASTERISK_DATA_DIR=/usr/share/asterisk

# Not sure how else to call this. This is not Asterisk's datadir ;
# it's just the directory where I keep data files (sounds, binaries, ...)
MY_DATA_FILES_DIR="${GIT_ROOT_DIR}/my-data"
DATA_DIR="${MY_DATA_FILES_DIR}/data"
SPOOL_DIR="${MY_DATA_FILES_DIR}/spool"
MOH_DIR="${MY_DATA_FILES_DIR}/music-on-hold"
MOH_INSTALL_DIR=/usr/share/asterisk/moh
VOICEMAIL_SOUNDS_DIR="${SPOOL_DIR}/voicemail"
voicemailSoundsInstallDir() { echo "${ASTERISK_SPOOLDIR}/voicemail/default/${MAIN_EXTEN}"; }
AMI_CLIENT_DIR="${GIT_ROOT_DIR}/ami-client"
AMI_CLIENT_INSTALL_DIR="/etc/asterisk-config/ami-client"
AMI_CLIENT_SCRIPTS_DIR="${AMI_CLIENT_DIR}/scripts"
AMI_CLIENT_SCRIPTS_INSTALL_DIR="/var/lib/asterisk/sms"
SYSTEMD_DIR="${GIT_ROOT_DIR}/systemd"
SYSTEMD_UNITS_DIR="${SYSTEMD_DIR}/units"
SYSTEMD_UNITS_INSTALL_DIR=/etc/systemd/system

DOCKER_IMAGE_NAME=asterisk-home
CONTAINER_DIR="${GIT_ROOT_DIR}/container"
IMAGE_FILES_DIR="${CONTAINER_DIR}/files-to-add-to-image"

# Restore THIS_SCRIPT_DIR to what it was before.
THIS_SCRIPT_DIR="${OLD_THIS_SCRIPT_DIR}"

isTty() {
    local fd="${1}"
    [ -t "${fd}" ]
}

message() {
    if isTty 1; then
        echo -n -e '\e[1;92m'
        echo -n "$@"
        echo -n -e '\e[0m\n'
    else
        echo "$@"
    fi
}

messageError() {
    if isTty 2; then
        echo -n -e '\e[1;91m' >&2
        echo -n "$@" >&2
        echo -n -e '\e[0m\n' >&2
    else
        echo "$@" >&2
    fi
    false
}

# EXPECTED PARAMS:
#
# 1 : The actual number of arguments
# 2 : The minimum number of arguments expected
# 3 : The maximum number of arguments expected
# OR
# 1 : The actual number of arguments
# 2 : The exact number of arguments expected
#
# RETURN CODE:
# Nonzero if expected != actual ; otherwise 0
checkParamNum() {
    local actual="${1}"
    local min="${2}"
    if [ $# -ge 3 ]; then
        local max="${3}"
    else
        local max="${min}"
    fi
    if [ "${actual}" -lt "${min}" ] || [ "${actual}" -gt "${max}" ]; then
        messageError "${FUNCNAME[1]} : Got ${actual} params ; expected $([ "${min}" == "${max}" ] && echo "${min}" || echo "between ${min} and ${max}")."
    fi
}

assertRoot() {
    if [ "$(whoami)" != root ]; then
        messageError 'Must be root to do this.'
        exit 1
    fi
}

deleteAndSyncDirectory() {
    checkParamNum $# 2 2 || exit 1
    local srcDir="${1}"
    # Append "/" to srcDir if there isn't one already.
    if ! echo "${srcDir}" | grep -qP '/$'; then
        srcDir="${srcDir}/"
    fi
    local dstDir="${2}"

    rsync -Puza --delete-after "${srcDir}" "${dstDir}"
}

installDirectoryContents() {
    checkParamNum $# 2 2 || exit 1
    local srcDir="${1}"
    # Append "/" to srcDir if there isn't one already.
    if ! echo "${srcDir}" | grep -qP '/$'; then
        srcDir="${srcDir}/"
    fi
    local dstDir="${2}"

    rsync -Puza "${srcDir}" "${dstDir}"
}

# Finds regular files in a directory, and sets the files
# as an array in a variable.
# PARAMS:
# 1 : output variable name.
# 2 : directory.
findRegularFilesInDir() {
    checkParamNum $# 2 || exit 1
    local outVar="${1}"
    local dir="${2}"

    local oldIfs="${IFS}"
    local IFS=$'\n'
    local files=($(find "${dir}" -type f -print))
    local IFS="${oldIfs}"

    eval "${outVar}"="($(printf '%q ' "${files[@]}"))"
}
