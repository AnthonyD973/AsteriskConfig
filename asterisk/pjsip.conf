[transport-udp-nat]
type = transport
protocol = udp
bind = 0.0.0.0:@PJSIP_PORT@
local_net = 192.168.0.0/24
local_net = 127.0.0.1/32
external_media_address = @DOMAIN_NAME@
external_signaling_address = @DOMAIN_NAME@

[voipms]
type = registration
transport = transport-udp-nat
outbound_auth = voipms
client_uri = sip:@VOIPMS_USERNAME@@@VOIPMS_SERVER@:@VOIPMS_SERVER_PORT@
server_uri = sip:@VOIPMS_SERVER@:@VOIPMS_SERVER_PORT@

[voipms]
type = auth
auth_type = userpass
username = @VOIPMS_USERNAME@
password = @VOIPMS_PASSWORD@

[voipms]
type = aor
contact = sip:@VOIPMS_USERNAME@@@VOIPMS_SERVER@

[voipms]
type = endpoint
transport = transport-udp-nat
context = voipms-inbound
disallow = all
allow = ulaw
from_user = @VOIPMS_USERNAME@
outbound_auth = voipms
aors = voipms
; NAT parameters:
rtp_symmetric = yes
rewrite_contact = yes
send_rpid = yes

[voipms]
type = identify
endpoint = voipms
match = @VOIPMS_SERVER@

[linux]
type = aor
max_contacts = 1
; Remove contact if a new one tries to connect.
remove_existing = yes
; Make sure peer is still there every N seconds.
qualify_frequency = @ENDPOINT_QUALIFY_FREQUENCY@

[linux]
type = auth
username = linux
password = @ENDPOINT1_PASSWORD@

[linux]
type = endpoint
context = phones
allow = ulaw
auth = linux
outbound_auth = linux
aors = linux
transport = transport-udp-nat

[ami-client]
type = aor
; Disallow registering on this endpoint. This endpoint
; is only used by the AMI client.
max_contacts = 0

[ami-client]
type = endpoint
context = phones
allow = ulaw
outbound_auth = ami-client
aors = ami-client

[home-phone]
type = aor
max_contacts = 1
; Remove contact if a new one tries to connect.
remove_existing = yes
; Make sure peer is still there every N seconds.
qualify_frequency = @ENDPOINT_QUALIFY_FREQUENCY@

[home-phone]
type = auth
username = home-phone
password = @ENDPOINT2_PASSWORD@

[home-phone]
type = endpoint
context = phones
allow = ulaw
auth = home-phone
outbound_auth = home-phone
aors = home-phone
transport = transport-udp-nat

[work-computer1]
type = aor
max_contacts = 1
; Remove contact if a new one tries to connect.
remove_existing = yes
; Make sure peer is still there every N seconds.
qualify_frequency = @ENDPOINT_QUALIFY_FREQUENCY@

[work-computer1]
type = endpoint
context = phones
allow = ulaw
auth = work-computer1
outbound_auth = work-computer1
aors = work-computer1
transport = transport-udp-nat

[work-computer1]
type = auth
username = work-computer1
password = @ENDPOINT3_PASSWORD@

[tablet]
type = aor
max_contacts = 1
; Remove contact if a new one tries to connect.
remove_existing = yes
; Make sure peer is still there every N seconds.
qualify_frequency = @ENDPOINT_QUALIFY_FREQUENCY@

[tablet]
type = auth
username = tablet
password = @ENDPOINT4_PASSWORD@

[tablet]
type = endpoint
context = phones
allow = ulaw
auth = tablet
outbound_auth = tablet
aors = tablet
transport = transport-udp-nat

[cell-phone]
type = aor
max_contacts = 1
; Remove contact if a new one tries to connect.
remove_existing = yes
; Make sure peer is still there every N seconds.
qualify_frequency = @ENDPOINT_QUALIFY_FREQUENCY@

[cell-phone]
type = auth
username = cell-phone
password = @ENDPOINT5_PASSWORD@

[cell-phone]
type = endpoint
context = phones
allow = ulaw
auth = cell-phone
outbound_auth = cell-phone
aors = cell-phone
transport = transport-udp-nat

