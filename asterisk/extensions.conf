[globals]
; Specific to extensions.conf

; Main extension
MAIN_EXTEN = @MAIN_EXTEN@
; Extension to check voicemail messages
VOICEMAIL_MAIN_EXTEN = *${MAIN_EXTEN}
; Extension to leave voicemail messages
VOICEMAIL_EXTEN = **${MAIN_EXTEN}
; List of devices that get called when calling the main extension
DEVICE_LIST = @DEVICE_LIST@
; Dial time before going to voicemail
DIAL_TIME_SEC = @DIAL_TIME_SEC@

; Bash scripts (in /var/lib/asterisk if relative).
SMS_RECEIVED_SCRIPT=sms/on-sms-received.sh

; Voip.ms account
CALLER_NAME = @CALLER_NAME@
DID_NUMBER = @DID_NUMBER@
VOIPMS_ACCOUNT_ID = @VOIPMS_ACCOUNT_ID@
VOIPMS_SERVER = @VOIPMS_SERVER@

; ==============================================
; =                 SUBROUTINES                =
; ==============================================

; Returns 1 if endpoint is present, 0 if it is not or
; does not exist.
[isDevicePresent]
exten => s,1,Set(DEVICE=${ARG1})
same  => n,Return(${REGEX("UNKNOWN|NOT_INUSE|INUSE|BUSY|RINGING|RINGINUSE|ONHOLD","${DEVICE_STATE(${DEVICE})}")})

[generateDialString]
exten => s,1,Set(exten_list=${DEVICE_LIST})
same  => n,Set(dialString=)
same  => n,While($["${SET(exten=${SHIFT(exten_list)})}" != ""])
; Do not even try to dial if the device is not present.
same  => n,Gosub(isDevicePresent,s,1(${exten}))
same  => n,GotoIf($[!${GOSUB_RETVAL}]?loop-end)
same  => n,Set(dialString=${dialString}&${exten})
same  => n(loop-end),EndWhile()
same  => n,Set(dialString=${dialString:1})
same  => n,Return(${dialString})

[sendSmsToEndpoints]
exten => s,1,NoOp(Sending SMS messages to all extensions...)
same  => n,Set(exten_list=${DEVICE_LIST})
same  => n,Set(received_by=)
; Loop on all extensions
same  => n,While($["${SET(exten=${SHIFT(exten_list)})}" != ""])
same  => n,Set(chan=${CUT(exten,/,1)})
same  => n,Set(endpoint=${CUT(exten,/,2)})
; If device is not present, do not even try to send
; the message.
same  => n,Gosub(isDevicePresent,s,1(${exten}))
same  => n,GotoIf($[!${GOSUB_RETVAL}]?loop-end)
; Try to send the message
same  => n,MessageSend(${TOLOWER(${chan})}:${endpoint}@${HOST_TO},${ACTUAL_FROM})
same  => n,NoOp(${MESSAGE_SEND_STATUS})
same  => n,GotoIf($["${MESSAGE_SEND_STATUS}" != "SUCCESS"]?loop-end)
; If the message was not sent or the device is not present,
; the message was not received.
same  => n,Set(received_by=${received_by},${chan}/${endpoint})
same  => n(loop-end),EndWhile()
same  => n,Set(received_by=${received_by:1})
; Finally, return the list of devices that received the
; message.
same  => n,Return(${received_by})

[dialEndpoints]
exten => s,1,NoOp(Dialing endpoint...)
same  => n,Gosub(generateDialString,s,1)
same  => n,Set(dialString=${GOSUB_RETVAL})
same  => n,GotoIf($["${dialString}" == ""]?return)
same  => n,Dial(${dialString},${DIAL_TIME_SEC})
same  => n(return),Return()

[leaveVoicemailMessage]
exten => s,1,NoOp(Leaving voicemail message...)
same  => n,Set(VM_EXTEN="${ARG1}")
same  => n,VoiceMail(${VM_EXTEN})
same  => n,Return()

; ==============================================
; =                  DIALPLAN                  =
; ==============================================

[phones]
; Test if trying to send text message between extensions, and, if so,
; jump to appropriate context.
exten => ${MAIN_EXTEN},1,GotoIf($["${MESSAGE(to)}" != ""]?sms-in,fromPeer,1)
same  => n,Gosub(dialEndpoints,s,1)
same  => n,GoSub(leaveVoicemailMessage,s,1(${EXTEN}))
same  => n,Hangup()

exten => ${VOICEMAIL_MAIN_EXTEN},1,VoiceMailMain(${EXTEN:1})
same  => n,Hangup()

exten => ${VOICEMAIL_EXTEN},1,GoSub(leaveVoicemailMessage,s,1(${EXTEN:2}))
same  => n,Hangup()

include => voipms-inbound
include => voipms-outbound

[voipms-inbound]
; Voip.MS uses extension "s" when sending
; us an SMS.
exten => s,1,Goto(sms-in,${MAIN_EXTEN},1)

exten => voipms,1,GotoIf($["${MESSAGE(from)" != ""]?sms-in,${MAIN_EXTEN},1)
same  => n,Goto(phones,${MAIN_EXTEN},1)

[voipms-outbound]
exten => _1NXXNXXXXXX,1,Set(CALLERID(all)="${CALLER_NAME}" <${DID_NUMBER}>)
; Test if instant message, and, if so, jump to appropriate context.
same  => n,GotoIf($["${MESSAGE(to)}" != ""]?sms-out,${EXTEN:1},1)
same  => n,Dial(PJSIP/${EXTEN}@voipms)
same  => n,Hangup()

exten => _NXXNXXXXXX,1,Goto(voipms-outbound,1${EXTEN},1)

exten => _011.,1,Dial(PJSIP/${EXTEN}@voipms)
same  => n,Hangup()

exten => _00.,1,Dial(PJSIP/${EXTEN}@voipms)
same  => n,Hangup()

[sms-out]
exten => _NXXNXXXXXX,1,NoOp(Outbound Message dialplan invoked)
same  => n,Set(CALLERID(name)=${DID_NUMBER})
same  => n,NoOp(To ${MESSAGE(to)})
same  => n,NoOp(From ${MESSAGE(from)})
same  => n,NoOp(Body ${MESSAGE(body)})
same  => n,Set(NUMBER_FROM=${CUT(CUT(MESSAGE(from),@,1),:,2)})
same  => n,Set(NUMBER_TO=${CUT(CUT(MESSAGE(to),@,1),:,2)})
same  => n,Set(ACTUAL_FROM="${DID_NUMBER}" <sip:${VOIPMS_ACCOUNT_ID}@montreal.voip.ms>)
same  => n,Set(ACTUAL_TO=pjsip:voipms/sip:${NUMBER_TO}@montreal.voip.ms>)
same  => n,MessageSend(${ACTUAL_TO},${ACTUAL_FROM})
same  => n,NoOp(Send status is ${MESSAGE_SEND_STATUS})
same  => n,Hangup()

[sms-in]
exten => fromPeer,1,NoOp(Inbound SMS from peer)
same  => n,Set(CALLERID(all)="" <${MAIN_EXTEN}>)
same  => n,Set(NUMBER_TO=${MAIN_EXTEN})
same  => n,Set(MESSAGE(from)=${MAIN_EXTEN})
same  => n,Set(ACTUAL_FROM=${MAIN_EXTEN})
same  => n,Goto(sms-in,general,1)

exten => _.,1,NoOp(Inbound SMS dialplan invoked)
same  => n,Set(ACTUAL_FROM=${MESSAGE(from)})
same  => n,Set(NUMBER_TO=${EXTEN})
same  => n,Goto(sms-in,general,1)

exten => general,1,NoOp(General SMS extension)
same  => n,Set(HOST_TO=${CUT(MESSAGE(to),@,2)})
same  => n,GoSub(sendSmsToEndpoints,s,1)
same  => n,Set(receivedBy=${GOSUB_RETVAL})
; Call script to write SMS and metadata to file.
same  => n,Set(smsFile=${SHELL(${SMS_RECEIVED_SCRIPT} ${QUOTE(${NUMBER_TO})} ${QUOTE(${CALLERID(name)})} ${QUOTE(${CALLERID(num)})} ${QUOTE(${receivedBy})} ${QUOTE(${MESSAGE(body)})})})
same  => n,UserEvent(SmsReceived,ExtenTo:"${NUMBER_TO}",File:"${smsFile}")
same  => n,Hangup()
